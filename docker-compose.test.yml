# PokerIQ Pro 测试环境一键部署脚本
# 自动化部署所有服务和基础设施

networks:
  pokeriq-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:

services:
  # ===================
  # 数据库服务
  # ===================
  
  # PostgreSQL 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: pokeriq-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pokeriq_pro
      POSTGRES_USER: pokeriq
      POSTGRES_PASSWORD: test123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pokeriq -d pokeriq_pro"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: pokeriq-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass test123456
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ClickHouse 分析数据库
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: pokeriq-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: analytics
      CLICKHOUSE_PASSWORD: test123456
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # AI 和后端服务
  # ===================

  # GTO计算服务
  gto-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: pokeriq-gto-service
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:test123456@redis:6379/0
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - SERVICE_NAME=gto-service
      - SERVICE_VERSION=1.0.0
    depends_on:
      - postgres
      - redis
    ports:
      - "8001:8000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # AI对手服务
  opponent-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.opponent
    container_name: pokeriq-opponent-service
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:test123456@redis:6379/1
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - MODEL_PATH=/app/models
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ai-models:/app/models
    ports:
      - "8002:8000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # 用户画像服务
  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    container_name: pokeriq-profile-service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - REDIS_URL=redis://:test123456@redis:6379/2
      - CLICKHOUSE_URL=http://analytics:test123456@clickhouse:8123/analytics
    depends_on:
      - postgres
      - redis
      - clickhouse
    ports:
      - "8003:8000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # 推荐引擎服务
  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    container_name: pokeriq-recommendation-service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - REDIS_URL=redis://:test123456@redis:6379/3
      - ML_MODEL_PATH=/app/models
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ml-models:/app/models
    ports:
      - "8004:8000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # API网关
  api-gateway:
    build:
      context: ./system-integration
      dockerfile: Dockerfile
    container_name: pokeriq-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=test
      - REDIS_URL=redis://:test123456@redis:6379/4
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - GTO_SERVICE_URL=http://gto-service:8000
      - OPPONENT_SERVICE_URL=http://opponent-service:8000
      - PROFILE_SERVICE_URL=http://profile-service:8000
      - RECOMMENDATION_SERVICE_URL=http://recommendation-service:8000
      - JWT_SECRET=test-jwt-secret-key
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - postgres
      - redis
      - gto-service
      - opponent-service
      - profile-service
      - recommendation-service
    ports:
      - "3001:3001"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # ===================
  # 前端应用
  # ===================

  # Next.js 前端应用
  frontend:
    build:
      context: ./pokeriq-pro
      dockerfile: Dockerfile.test
    container_name: pokeriq-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
    depends_on:
      - api-gateway
    ports:
      - "3000:3000"
    networks:
      - pokeriq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 20s
      timeout: 10s
      retries: 3

  # ===================
  # 监控和日志服务
  # ===================

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: pokeriq-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - pokeriq-network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: pokeriq-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: test123456
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    ports:
      - "3002:3000"
    networks:
      - pokeriq-network

  # ===================
  # 负载测试和工具
  # ===================

  # 负载测试工具
  load-tester:
    build:
      context: ./load-testing
      dockerfile: Dockerfile
    container_name: pokeriq-load-tester
    restart: "no"
    environment:
      - TARGET_URL=http://api-gateway:3001
      - CONCURRENT_USERS=50
      - TEST_DURATION=300
    depends_on:
      - api-gateway
    networks:
      - pokeriq-network
    profiles:
      - testing

  # 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: pokeriq-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - pokeriq-network
    profiles:
      - tools

  # Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pokeriq-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:4:test123456
    depends_on:
      - redis
    ports:
      - "8081:8081"
    networks:
      - pokeriq-network
    profiles:
      - tools

# ===================
# 健康检查和初始化
# ===================

  # 系统初始化器
  initializer:
    build:
      context: ./scripts
      dockerfile: Dockerfile.init
    container_name: pokeriq-initializer
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://pokeriq:test123456@postgres:5432/pokeriq_pro
      - REDIS_URL=redis://:test123456@redis:6379/0
    depends_on:
      - postgres
      - redis
      - clickhouse
    networks:
      - pokeriq-network
    command: ["/app/init-system.sh"]