name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'

jobs:
  # 部署到Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Deployed to ${{ steps.deploy.outputs.url }}'
            })

  # 部署到自托管服务器
  deploy-server:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-vercel]
    environment:
      name: production-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /var/www/pokeriq-pro
            git pull origin main
            npm ci --production
            npm run build
            pm2 restart pokeriq-pro --update-env
            
            # 运行数据库迁移
            npm run db:migrate:prod
            
            # 清理Redis缓存
            redis-cli FLUSHDB
            
            # 健康检查
            sleep 10
            curl -f http://localhost:8820/api/health || exit 1

  # 数据库备份
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-server]
    steps:
      - name: Backup PostgreSQL
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            timestamp=$(date +%Y%m%d_%H%M%S)
            pg_dump ${{ secrets.DATABASE_URL }} > /backups/pokeriq_${timestamp}.sql
            
            # 压缩备份
            gzip /backups/pokeriq_${timestamp}.sql
            
            # 上传到S3
            aws s3 cp /backups/pokeriq_${timestamp}.sql.gz s3://${{ secrets.BACKUP_BUCKET }}/database/
            
            # 清理旧备份（保留最近30天）
            find /backups -name "pokeriq_*.sql.gz" -mtime +30 -delete

  # 发送部署通知
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-vercel, deploy-server]
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '❌ PokerIQ Pro Deployment Failed'
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}