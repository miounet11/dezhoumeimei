# PokerIQ Pro Nginx API Gateway Configuration
# 系统集成专用高性能API网关配置，支持100万+并发用户
# 版本: v2.0 - 系统集成版本

# 全局配置优化
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 工作模式优化 - 为系统集成优化
events {
    worker_connections 16384;  # 提升到16K连接
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # 基本配置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # 性能优化配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    server_tokens off;
    
    # 缓冲区优化
    client_body_buffer_size 16K;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    client_body_timeout 60;
    client_header_timeout 60;
    send_timeout 60;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli压缩 (需要安装模块)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 上游服务器配置
    upstream pokeriq_app {
        # 负载均衡策略 - 基于最少连接数
        least_conn;
        
        # 应用服务器实例
        server app1:8830 weight=3 max_fails=3 fail_timeout=30s;
        server app2:8831 weight=3 max_fails=3 fail_timeout=30s;
        server app3:8832 weight=3 max_fails=3 fail_timeout=30s;
        server app4:8833 weight=2 max_fails=3 fail_timeout=30s backup;
        
        # 连接保持配置
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # AI服务上游配置
    upstream pokeriq_ai {
        # IP哈希策略 - 确保AI模型状态一致性
        ip_hash;
        
        server ai-service1:8000 weight=5 max_fails=2 fail_timeout=20s;
        server ai-service2:8001 weight=5 max_fails=2 fail_timeout=20s;
        server ai-service3:8002 weight=3 max_fails=2 fail_timeout=20s;
        
        keepalive 16;
    }
    
    # WebSocket上游配置
    upstream pokeriq_websocket {
        # 基于客户端IP的一致性哈希
        hash $remote_addr consistent;
        
        server ws1:3001 weight=1 max_fails=1 fail_timeout=10s;
        server ws2:3002 weight=1 max_fails=1 fail_timeout=10s;
        server ws3:3003 weight=1 max_fails=1 fail_timeout=10s;
        
        keepalive 8;
    }
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=general:100m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:50m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth:20m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=payment:10m rate=1r/s;
    
    # 连接数限制
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # 速度限制
    limit_rate_after 10m;
    limit_rate 1m;
    
    # 缓存配置
    proxy_cache_path /var/cache/nginx/app levels=1:2 keys_zone=app_cache:100m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:200m max_size=5g inactive=1d use_temp_path=off;
    
    # 主服务器配置
    server {
        listen 80;
        listen [::]:80;
        server_name pokeriq.pro www.pokeriq.pro;
        
        # 重定向到HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS主配置
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name pokeriq.pro www.pokeriq.pro;
        
        # SSL配置
        ssl_certificate /etc/ssl/certs/pokeriq.pro.crt;
        ssl_certificate_key /etc/ssl/private/pokeriq.pro.key;
        ssl_trusted_certificate /etc/ssl/certs/pokeriq.pro-chain.crt;
        
        # SSL优化
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # 安全头
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # 连接限制
        limit_conn perip 50;
        limit_conn perserver 2000;
        
        # 静态资源缓存
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # 静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            
            try_files $uri @app;
        }
        
        # Next.js静态文件
        location /_next/static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://pokeriq_app;
            proxy_cache static_cache;
            proxy_cache_valid 200 1d;
        }
        
        # API路由
        location /api/ {
            # API限流
            limit_req zone=api burst=50 nodelay;
            
            # 代理配置
            proxy_pass http://pokeriq_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓存配置
            proxy_cache app_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 10s;
            
            # 缓存绕过
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # AI服务路由
        location /api/ai/ {
            # AI服务专用限流
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://pokeriq_ai;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # AI服务超时配置
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 不缓存AI结果
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }
        
        # WebSocket连接
        location /socket.io/ {
            proxy_pass http://pokeriq_websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket超时配置
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # 认证路由
        location /api/auth/ {
            # 认证限流
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://pokeriq_app;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 不缓存认证请求
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }
        
        # 支付路由
        location /api/payment/ {
            # 支付限流
            limit_req zone=payment burst=5 nodelay;
            
            proxy_pass http://pokeriq_app;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支付超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 不缓存支付请求
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 监控指标
        location /metrics {
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://pokeriq_app/api/monitoring/metrics;
            proxy_set_header Host $host;
        }
        
        # 默认应用路由
        location @app {
            # 通用限流
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://pokeriq_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 页面缓存
            proxy_cache app_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        }
        
        # 根路径
        location / {
            try_files $uri $uri/ @app;
        }
        
        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # CDN边缘节点配置
    server {
        listen 8080;
        server_name cdn.pokeriq.pro;
        
        # CDN专用日志
        access_log /var/log/nginx/cdn_access.log main;
        
        # 静态资源CDN
        location / {
            root /var/www/cdn;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # CORS设置
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "Range";
            
            try_files $uri =404;
        }
    }
    
    # 监控和状态页面
    server {
        listen 8888;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
        
        location /upstream_status {
            upstream_status;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
    }
}